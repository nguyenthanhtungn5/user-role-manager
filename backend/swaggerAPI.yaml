openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: |
    REST API für Benutzer, Rollen, Rechte und deren Zuweisungen.

servers:
  - url: http://localhost:{port}
    description: Lokale Entwicklung
    variables:
      port:
        default: "8888"

tags:
  - name: Users
  - name: Roles
  - name: Permissions
  - name: Assignments

paths:
  /api/users:
    get:
      tags: [Users]
      summary: Benutzer auflisten (mit Pagination & Suche)
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Anzahl pro Seite
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
          description: Startindex
        - in: query
          name: email
          schema: { type: string }
          description: Suchbegriff mit Email
      responses:
        "200":
          description: Liste der Benutzer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              example:
                - id: 1
                  firstName: Tung
                  lastName: Nguyen
                  email: nguyenthanh@gmail.com
                  phone: "017643253000"
                - id: 2
                  firstName: T2
                  lastName: T3
                  email: nguyenthanh@gmail.com
                  phone: "017643253000"
    post:
      tags: [Users]
      summary: Benutzer anlegen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              example:
                value:
                  firstName: Ada
                  lastName: Lovelace
                  email: ada@example.com
                  phone: "+49 151 23456789"
      responses:
        "201":
          description: Benutzer erstellt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Validierungsfehler
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Email existiert bereits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/roles:
    get:
      tags: [Roles]
      summary: Rollen auflisten
      responses:
        "200":
          description: Rollenliste
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Role" }
    post:
      tags: [Roles]
      summary: Rolle anlegen
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateRoleRequest" }
            examples:
              example:
                value: { name: admin }
      responses:
        "201":
          description: Rolle erstellt
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Role" }
        "200":
          description: Rolle existiert bereits (idempotente Anlage)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "400":
          description: Validierungsfehler
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /api/roles/{id}:
    delete:
      tags: [Roles]
      summary: Rolle löschen
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "204": { description: Gelöscht }
        "404":
          description: Nicht gefunden
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/permissions:
    get:
      tags: [Permissions]
      summary: Rechte auflisten
      responses:
        "200":
          description: Rechte-Liste
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Permission" }
    post:
      tags: [Permissions]
      summary: Recht anlegen
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreatePermissionRequest" }
            examples:
              example:
                value: { name: user.write }
      responses:
        "201":
          description: Recht erstellt
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Permission" }
        "200":
          description: Recht existiert bereits (idempotente Anlage)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "400":
          description: Validierungsfehler
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /api/permissions/{id}:
    delete:
      tags: [Permissions]
      summary: Recht löschen
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "204": { description: Gelöscht }
        "404":
          description: Nicht gefunden
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/assign/user-roles:
    post:
      tags: [Assignments]
      summary: Rollen einem Benutzer zuweisen
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AssignUserRolesRequest" }
            examples:
              example:
                value: { userId: 1, roleIds: [1, 2] }
      responses:
        "204": { description: Erfolgreich zugewiesen }
        "400":
          description: Validierungsfehler
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /api/assign/role-permissions:
    post:
      tags: [Assignments]
      summary: Rechte einer Rolle zuweisen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              { $ref: "#/components/schemas/AssignRolePermissionsRequest" }
            examples:
              example:
                value: { roleId: 1, permissionIds: [1, 3, 5] }
      responses:
        "204": { description: Erfolgreich zugewiesen }
        "400":
          description: Validierungsfehler
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

components:
  schemas:
    Message:
      type: object
      properties:
        message: { type: string }
      example: { message: "Role already exists" }

    Error:
      type: object
      properties:
        message: { type: string }
      example: { message: "Internal error" }

    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              msg: { type: string }
              param: { type: string }
              location: { type: string }
      example:
        errors:
          - msg: "Invalid value"
            param: "email"
            location: "body"

    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        firstName: { type: string, example: "Ada" }
        lastName: { type: string, example: "Lovelace" }
        email: { type: string, format: email, example: "ada@example.com" }
        phone: { type: string, nullable: true, example: "+49 151 23456789" }

    CreateUserRequest:
      type: object
      required: [firstName, lastName, email]
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }

    Role:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "admin" }

    CreateRoleRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }

    Permission:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "user.write" }

    CreatePermissionRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }

    AssignUserRolesRequest:
      type: object
      required: [userId, roleIds]
      properties:
        userId: { type: integer, example: 1 }
        roleIds:
          type: array
          items: { type: integer }
          minItems: 1
          example: [1, 2]

    AssignRolePermissionsRequest:
      type: object
      required: [roleId, permissionIds]
      properties:
        roleId: { type: integer, example: 1 }
        permissionIds:
          type: array
          items: { type: integer }
          minItems: 1
          example: [1, 3, 5]
